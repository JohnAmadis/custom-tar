stages:
  - build
  - test

variables:
  CMAKE_BUILD_TYPE: Release
  BUILD_DIR: build

# Cache for build artifacts
cache:
  paths:
    - build/
  key: "$CI_COMMIT_REF_SLUG"

# Build stage
build:
  stage: build
  image: ubuntu:22.04
  before_script:
    # Install dependencies
    - apt-get update -qq
    - apt-get install -y -qq cmake build-essential g++
  script:
    # Configure CMake
    - cmake -S . -B ${BUILD_DIR} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    # Build project
    - cmake --build ${BUILD_DIR} --parallel $(nproc)
    # Verify executable was created
    - ls -la ${BUILD_DIR}/bin/
    - file ${BUILD_DIR}/bin/custom-tar
  artifacts:
    paths:
      - ${BUILD_DIR}/bin/custom-tar
    expire_in: 1 hour
    reports:
      # Store build logs
      junit: build_report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Test stage
test:
  stage: test
  image: ubuntu:22.04
  dependencies:
    - build
  before_script:
    # Install Python for tests
    - apt-get update -qq
    - apt-get install -y -qq python3 python3-pip
  script:
    # Make executable runnable
    - chmod +x ${BUILD_DIR}/bin/custom-tar
    # Run tests
    - cd tests
    - python3 run_tests.py
  artifacts:
    when: always
    paths:
      - tests/test_results.xml
    reports:
      junit: tests/test_results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Optional: Manual test with custom data
test_with_sample_data:
  stage: test
  image: ubuntu:22.04
  dependencies:
    - build
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq python3
  script:
    - chmod +x ${BUILD_DIR}/bin/custom-tar
    # Generate test data if script exists
    - |
      if [ -f "generate_test_data.py" ]; then
        python3 generate_test_data.py
      fi
    # Test with real data
    - |
      if [ -d "test_logs" ]; then
        echo "Testing with test_logs directory..."
        ./${BUILD_DIR}/bin/custom-tar create test_sample.mtar test_logs/
        ./${BUILD_DIR}/bin/custom-tar list test_sample.mtar
        mkdir -p extracted_sample
        ./${BUILD_DIR}/bin/custom-tar extract test_sample.mtar extracted_sample/
        echo "Sample test completed successfully"
      else
        echo "No test_logs directory found, skipping sample test"
      fi
  artifacts:
    when: always
    paths:
      - test_sample.mtar
      - extracted_sample/
    expire_in: 1 day
  rules:
    - when: manual
    - if: $CI_COMMIT_BRANCH == "main"

# Performance test (optional, manual)
performance_test:
  stage: test
  image: ubuntu:22.04
  dependencies:
    - build
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq python3 time
  script:
    - chmod +x ${BUILD_DIR}/bin/custom-tar
    - cd tests
    # Run only performance tests
    - python3 -m unittest test_performance.CustomTarPerformanceTest -v
  artifacts:
    when: always
    paths:
      - tests/performance_results.log
    expire_in: 1 week
  rules:
    - when: manual
    - if: $CI_COMMIT_TAG